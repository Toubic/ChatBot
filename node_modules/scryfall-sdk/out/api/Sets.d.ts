declare enum SetType {
    core = 0,
    expansion = 1,
    masters = 2,
    masterpiece = 3,
    from_the_vault = 4,
    spellbook = 5,
    premium_deck = 6,
    duel_deck = 7,
    draft_innovation = 8,
    treasure_chest = 9,
    commander = 10,
    planechase = 11,
    archenemy = 12,
    vanguard = 13,
    funny = 14,
    starter = 15,
    box = 16,
    promo = 17,
    token = 18,
    memorabilia = 19
}
export interface Set {
    id: string;
    code: string;
    mtgo_code?: string | null;
    tcgplayer_id?: number | null;
    name: string;
    set_type: keyof typeof SetType;
    released_at?: string | null;
    block_code?: string | null;
    block?: string | null;
    parent_set_code?: string | null;
    card_count: number;
    digital: boolean;
    foil_only: boolean;
    scryfall_uri: string;
    uri: string;
    icon_svg_uri: string;
    search_uri: string;
}
declare const _default: {
    all(): Promise<Set[]>;
    byCode(code: string): Promise<Set>;
    byId(id: string): Promise<Set>;
    byTcgPlayerId(id: number): Promise<Set>;
    query<T>(apiPath: string | number | (string | number)[], query?: {
        [key: string]: any;
    }, post?: any): Promise<T>;
    queryPage<T_1>(emitter: import("../util/MagicEmitter").default<T_1>, apiPath: string, query: any, page?: number): Promise<void>;
    tryQuery(apiPath: string, query?: {
        [key: string]: any;
    }, post?: any): Promise<{
        result: import("axios").AxiosResponse<any>;
        lastError: import("../util/MagicQuerier").SearchError;
    }>;
    canRetry(error: import("../util/MagicQuerier").SearchError): boolean;
};
export default _default;
