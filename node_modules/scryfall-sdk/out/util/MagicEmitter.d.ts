/// <reference types="node" />
import { EventEmitter } from "events";
export default class MagicEmitter<T> extends EventEmitter {
    private _ended;
    get ended(): boolean;
    private _cancelled;
    get cancelled(): boolean;
    private _willCancelAfterPage;
    get willCancelAfterPage(): boolean;
    constructor();
    on(event: "data", listener: (data: T) => any): this;
    on(event: "end", listener: () => any): this;
    on(event: "cancel", listener: () => any): this;
    on(event: "error", listener: (err: Error) => any): this;
    on(event: "done", listener: () => any): this;
    emit(event: "data", data: T): boolean;
    emit(event: "end"): boolean;
    emit(event: "cancel"): boolean;
    emit(event: "error", error: Error): boolean;
    emit(event: "done"): boolean;
    cancel(): this;
    cancelAfterPage(): this;
    waitForAll(): Promise<T[]>;
    [Symbol.asyncIterator](): AsyncGenerator<T, void, unknown>;
    all(): AsyncGenerator<T, void, unknown>;
}
